export LINUXFAMILY=x86
export ARCH=amd64
export KERNELBRANCH='branch:linux-5.11.y'
export KERNELPATCHDIR='amd64-edge'
export KERNELDIR='linux-amd64-edge'
export PACKAGE_LIST_FAMILY="os-prober grub-efi-amd64 grub-efi grub-efi-amd64-bin linux-firmware efibootmgr efivar linux-image-generic" # ?
#export PACKAGE_LIST_FAMILY="os-prober grub-efi-amd64 grub-efi grub-efi-amd64-bin" # ?
export IMAGE_PARTITION_TABLE=gpt
export FIXED_IMAGE_SIZE=4096 #MiB
export UEFISIZE=66           #MiB
export BOOTSIZE=0            # No separate /boot


post_install_kernel_debs__wtf() {
	echo "Before the post_install_kernel_debs, \$SDCARD $SDCARD"
	ls -laht "$SDCARD"/boot || true
}

pre_update_initramfs__wtf() {
	echo "Before the updateinitramfs, \$SDCARD $SDCARD"
	ls -laht "$SDCARD"/boot || true
	echo "Before the updateinitramfs, \$MOUNT $MOUNT"
	ls -laht "$MOUNT"/boot || true
}

pre_umount_final_image__install_grub() {
	configure_grub
	local chroot_target=$MOUNT
	display_alert "Installing" "GRUB EFI" "info"
	ls -laht "$MOUNT"/boot || true

	# disarm bomb that was planted by the bsp.
	rm -f "$MOUNT"/etc/initramfs/post-update.d/99-uboot

	# getting rid of the dtb package is hard. for now just zap it
	rm -rf "$MOUNT"/boot/dtb* || true

	local install_grub_cmdline="update-initramfs -c -k all && update-grub && grub-install --no-nvram --removable" # nvram is global to the host, even across chroot. take care.
	display_alert "Installing Grub EFI..." "$install_grub_cmdline" ""
	mount_chroot "$chroot_target/" # this already handles /boot/efi which is required for it to work.
	chroot "$chroot_target" /bin/bash -c "$install_grub_cmdline" || { echo "*** FAILED GRUB INSTALL!!!";  echo "*** FAILED GRUB INSTALL!!!";  echo "*** FAILED GRUB INSTALL!!!"; }

	local root_uuid
	root_uuid=$(blkid -s UUID -o value "${LOOP}p2") # get the uuid of the root partition
	display_alert "grub-efi cfg to root part..." "uuid: ${root_uuid}" ""

	# Create /boot/efi/EFI/BOOT/grub.cfg (EFI/ESP) which will load /boot/grub/grub.cfg (in the rootfs, generated by update-grub)
	cat <<grubEfiCfg >"${MOUNT}"/boot/efi/EFI/BOOT/grub.cfg
search.fs_uuid ${root_uuid} root
set prefix=(\$root)'/boot/grub'
configfile \$prefix/grub.cfg
grubEfiCfg

	#tree "${MOUNT}"/boot

	echo "grub: "
	cat "${MOUNT}"/boot/efi/EFI/BOOT/grub.cfg

	echo "grub.cfg: "
	cat "${MOUNT}"/boot/grub/grub.cfg | grep "\/boot"

	#echo "Heres a shell in the chroot by the time we run grub."
	#chroot "$chroot_target" /bin/bash -i

	umount_chroot "$chroot_target/"

}

configure_grub() {
	cat <<EOF >>"${MOUNT}"/etc/default/grub.d/armbian-sd-uefi.cfg
GRUB_CMDLINE_LINUX_DEFAULT=" console=ttyS0 console=tty1" # extra Kernel cmdline is configured here
GRUB_TIMEOUT_STYLE=menu                                  # Show the menu...
GRUB_TIMEOUT=5                                           # ... for 5 seconds
GRUB_DISTRIBUTOR="Armbian"                               # This is a Spart^H^H^H^H^HArmbian! (will show up in some UEFI BIOS boot menu (F8?), not on others)
GRUB_DISABLE_OS_PROBER=true                              # Disable OS probing, since this is a SD card, makes no sense.
EOF
}
