# Hack, get my motherboard serial number, if it matches, activate a bunch of network-related settings.
MOTHERBOARD_SERIAL_NUMBER=""
if [[ -f /usr/sbin/dmidecode ]]; then
	MOTHERBOARD_SERIAL_NUMBER=$(dmidecode | grep -A 15 ASUS | grep "Serial Number" | cut -d ":" -f 2 | xargs echo -n)
fi

# Get the MAC address of eth0
MAC_ADDRESS=""
[[ -f /sys/class/net/eth0/address ]] && MAC_ADDRESS="$(xargs echo -n </sys/class/net/eth0/address)"

if [[ "${MOTHERBOARD_SERIAL_NUMBER}" == "161292401700997" ]] || # amd64
	[[ "${MAC_ADDRESS}" == "00:1e:06:42:6f:5d" ]]; then # n2+
	display_alert "Not you? Click here to logout - lol" "Detected rpardini developer machine" "info"
	### ###
	### ### rpardini: I have a huge squid proxy at home optimized for apt caching.
	### ###           Unfortunately I have problems when using redirect.armbian.com and apt.armbian.com
	### ###           when going through that proxy (that works perfectly for other stuff). I get
	### ###           502 errors. I avoid this by choosing a specific mirror.
	### ###           Unfortunately the cache only really caches http (not https), and it seems some
	### ###           Armbian mirrors are https-only. It seems I really should move to APT_CACHER or smth
	### ###
	### export APT_PROXY_ADDR="" # 192.168.66.52:31128 my squid does not work if used here this way.
	### export NO_APT_CACHER=yes
	### export PARDINI_PROXY=http://192.168.66.52:31128
	### export http_proxy=${PARDINI_PROXY}
	### export HTTP_PROXY=${PARDINI_PROXY}
	### export https_proxy=${PARDINI_PROXY}
	### export HTTPS_PROXY=${PARDINI_PROXY}
	### # When using proxy, auto-redirect does not work. Use a specific mirror.
	### # Find one using ARMBIAN_MIRROR=$(wget -SO- -T 1 -t 1 https://redirect.armbian.com 2>&1 | egrep -i "Location" | awk '{print $2}' | head -1)
	### export ARMBIAN_MIRROR="http://armbian.systemonachip.net/apt"
	### # This is for the packages list in the chroot
	### export LOCAL_MIRROR="armbian.systemonachip.net/apt"

	# the cloud-init fragment accepts CLOUD_INIT_USER_DATA_URL which I always have set on my build env. (its private, thanks for asking)
	# if that is set, I need to use dhcp and wait for network, so I change CLOUD_INIT_NET_CONFIG_FILE to reflect that.
	# See userpatches/overlay/cloud-init tree
	cloud_init_determine_network_config_template__990_prefer_dhcp_and_wait() {
		if [[ "a${CLOUD_INIT_USER_DATA_URL}" != "afiles" ]]; then
			# Add "-wait"  to the cloud-init network config, since I'll be using network during cloud-init.
			export CLOUD_INIT_NET_CONFIG_FILE="${CLOUD_INIT_NET_CONFIG_FILE//staticip/dhcp}-wait"
			display_alert "c-i network-config" "${CLOUD_INIT_NET_CONFIG_FILE}" "info"
		fi
	}

	# optimize build time with close to 100% CPU usage -- keep one hyperthread or core free
	# on hyperthreaded systems, nproc counts hyperthreads, not cores. so maybe not ideal on non HT-systems
	# or when running on VMs whose hypervisors lie about topology.
	config_post_determine_cthreads__i_have_hyperthreaded_build_machine() {
		local OLD_CTHREADS=$CTHREADS
		export CTHREADS="-j$(nproc --ignore=1)"
		display_alert "cthreads" "Updated from $OLD_CTHREADS to $CTHREADS since we have $(nproc) cpu threads" "info"
	}

fi
