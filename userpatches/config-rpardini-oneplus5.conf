# include all fragments. they have functions and default values, used below.
source fragment-common-settings.conf

###
### Configuration. Points to the board, which has all the HW specific details, like DTBs etc.
###
export BOARD=oneplus5     # a new 'board'. you'll soon discover truths.
export SERIALCON="ttyGS0" # This is a serial USB gadget that will be setup by the initramfs, after kernel booted, but before switching into rootfs.

#export BRANCH=edge # 5.11 with its own config file... (I get no text console with this one, only OP Android logo)
export BRANCH=current # 5.10-lts with its own config file... (video works)

# We need to label the rootFS with an ext4 label so that we can find it, both at system and at userdata partitions.
# The user can choose where to flash it when it comes to fastboot flash
export ROOT_FS_LABEL="Armbian_root"

# To configure and watch kernel+others build progress...
export KERNEL_CONFIGURE=yes
export PROGRESS_DISPLAY=allofit

export REPOSITORY_INSTALL="u-boot" # try not to build u-boot, but it tries to install it anyway, @TODO: need to hack

# Bootloader related, ripped from pmos deviceinfo file
export deviceinfo_kernel_cmdline="androidboot.hardware=qcom user_debug=31 msm_rtb.filter=0x37 ehci-hcd.park=3 lpm_levels.sleep_disabled=1 sched_enable_hmp=1 sched_enable_power_aware=1 service_locator.enable=1 swiotlb=2048 androidboot.usbconfigfs=true androidboot.usbcontroller=a800000.dwc3 firmware_class.path=/vendor/firmware_mnt/image loop.max_part=7 ramoops.mem_address=0xac000000 ramoops.mem_size=0x200000 ramoops.console_size=0x40000"
export deviceinfo_flash_offset_base="0x00000000"
export deviceinfo_flash_offset_kernel="0x00008000"
export deviceinfo_flash_offset_ramdisk="0x01000000"
export deviceinfo_flash_offset_second="0x00f00000"
export deviceinfo_flash_offset_tags="0x00000100"
export deviceinfo_flash_pagesize="4096"
export deviceinfo_flash_sparse="true"

export WIREGUARD=no

board_determine_cloud_init_network_config_template() {
	# Default to using usb0 with a static IP. effectively no networking, but the user can access it via ssh.
	# If user goes all the way, they can set up dnsmasq/iptables etc to forward traffic to the internet.
	# But then it probably is easier to just bridge hosts eth0 and usb0 together and use usb0-dhcp-wait.
	export CLOUD_INIT_NET_CONFIG_FILE="usb0-staticip"
	display_alert "Cloud-init network-config" "setting template ${CLOUD_INIT_NET_CONFIG_FILE}" "info"
}

# early config hook, after family set variables. used for overrides
config_tweaks_post_family_config() {
	display_alert "Custom config stage" "config_tweaks_post_family_config" "info"
	# Use different U-boot.
	# export BOOTBRANCH="tag:v2021.01"

	# use specific KERNELBRANCH
	#export KERNELBRANCH='tag:v5.10.23' # 23 works, but 27 does not. 25 does not work. 24 does not work. 24 is guilty!
	#export KERNELDIR='linux-v5.10.23'
}

# not so early hook
user_config() {
	display_alert "Custom config stage" "user_config" "info"
	user_config__enable_cloudinit
	user_config__add_avahi_daemon
	user_config__disable_writing_sd_card
}

user_config_post_aggregate_packages() {
	display_alert "Custom config stage" "user_config_post_aggregate_packages" "info"
	user_config_post_aggregate_packages__confirm_cloudinit_packages
}

# This is run inside the chroot building the bsp (armbian-config) package.
# Stuff done here will persist across reinstalls of the bsp package.
# Stuff done in image_tweaks_pre_customize() only applies to rootfs on the SD card.
config_tweaks_bsp() {
	display_alert "Custom config stage" "config_tweaks_bsp" "info"
	config_tweaks_bsp__be_more_like_ubuntu_cloud
}

# This runs after install_common() and chroot_installpackages_local()
# Inside customize_image(), before running the actual custom script.
# *We dont use the custom script* so ***actual image customization is done here***
# not clear what happens after this? see below
image_tweaks_pre_customize() {
	display_alert "Custom config stage" "image_tweaks_pre_customize" "info"
	image_tweaks_pre_customize__cloud_init
}

# almost the last thing before copying to SD.
# this is called by post_debootstrap_tweaks() after ${SDCARD} is chroot_unmounted
# -> which is called by  debootstrap_ng() before prepare_partitions()/create_image()
# -> tmpfs is still going at this point.
config_post_debootstrap_tweaks() {
	display_alert "Custom config stage" "config_post_debootstrap_tweaks" "info"
	config_post_debootstrap_tweaks__hack_armbianEnv_ci_args
	config_post_debootstrap_tweaks__make_sure_hostapd_behaves
	config_post_debootstrap_tweaks__restore_systemd_resolved_from_resolvconf_and_armbian
}

config_pre_install_distribution_specific() {
	display_alert "Custom config stage" "config_pre_install_distribution_specific" "info"
	config_pre_install_distribution_specific__preserve_pristine_etc_systemd
}

config_pre_customize_image() {
	display_alert "Custom config stage" "config_pre_customize_image" "info"
	config_pre_customize_image__restore_preserved_systemd_and_netplan_stuff
	config_pre_customize_image__inject_initramfs_usb_gadget
}

config_post_install_kernel_debs() {
	display_alert "Custom config stage" "config_post_install_kernel_debs" "info"
	config_post_install_kernel_debs__copy_headers_deb_to_rootfs
}

config_pre_umount_final_image() {
	display_alert "Custom config stage" "config_pre_umount_final_image ${BASH_SOURCE%}" "info"
	config_pre_umount_final_image__androidfastboot_extract_kernel
}

config_post_umount_final_image() {
	display_alert "Custom config stage" "config_post_umount_final_image ${BASH_SOURCE%}" "info"
	config_post_umount_final_image___extract_pure_ext4_image_from_partitioned_loop
}

config_post_umount_final_image___extract_pure_ext4_image_from_partitioned_loop() {
	display_alert "Custom config stage" "config_post_umount_final_image___extract_pure_ext4_image_from_partitioned_loop" "info"

	local WANTED_PARTITION="${LOOP}p1"
	local DEST_IMG_FILE="${DEST}/images/${version}.fastboot.rootfs.img"

	#echo "Need to capture ${WANTED_PARTITION} (rootfs) as a simple ext4 instead of partitioned"
	#echo "Will output to ${DEST}/images/${version}.fastboot.rootfs.img"

	cat "${WANTED_PARTITION}" >"${DEST_IMG_FILE}"
}

create_fastboot_boot_img() {
	local id="$1"      # boot
	local ramdisk="$2" # ramdisk
	local cmdline="$3" # deviceinfo_kernel_cmdline
	local dest_output="${DEST}/images/${version}.fastboot.${id}.img"
	local boot_output="${MOUNT}/boot/fastboot.${id}.img"

	mkbootimg \
		--kernel "$MOUNT"/boot/vmlinuz.gz.dtb \
		--ramdisk "${ramdisk}" \
		--base "${deviceinfo_flash_offset_base}" \
		--second_offset "${deviceinfo_flash_offset_second}" \
		--cmdline "${cmdline}" \
		--kernel_offset "${deviceinfo_flash_offset_kernel}" \
		--ramdisk_offset "${deviceinfo_flash_offset_ramdisk}" \
		--tags_offset "${deviceinfo_flash_offset_tags}" \
		--pagesize "${deviceinfo_flash_pagesize}" \
		-o "${boot_output}"

	# Copy to dest too, since user will need to flash it via fastboot.
	cp "${boot_output}" "${dest_output}"
	display_alert "Android boot.img for fastboot" "${id}: .fastboot.${id}.img suffix" "info"

}

config_pre_umount_final_image__androidfastboot_extract_kernel() {
	display_alert "Custom config stage" "config_pre_umount_final_image__androidfastboot_extract_kernel" "info"

	# For now I'll just copy /boot to target until I figure out what I really need from it.
	#[[ -d "${DEST}/images/${version}.boot" ]] && rm -rf "${DEST}/images/${version}.boot"
	#cp -rp "$MOUNT"/boot "${DEST}/images/${version}.boot"

	# For now I'll just copy root to target until I figure out what I really need from it.
	#[[ -d "${DEST}/images/${version}.root" ]] && rm -rf "${DEST}/images/${version}.root"
	#cp -rp "$MOUNT" "${DEST}/images/${version}.root"

	# fastboot boot wants the gzipped kernel and concatenated dtb at the end. don't ask questions.
	gzip -9 --keep --no-name "$MOUNT"/boot/vmlinuz-*
	cat "$MOUNT"/boot/vmlinuz-*.gz "$MOUNT"/boot/dtb/"${BOOT_FDT_FILE}" >"$MOUNT"/boot/vmlinuz.gz.dtb

	# Prepare the android boot.img using mkbootimg -- this probably should move into initramfs generation,
	# although it will contain the
	# create Armbian based boot.img for android fastboot.
	create_fastboot_boot_img "boot" "$MOUNT"/boot/initrd.img-* "root=LABEL=${ROOT_FS_LABEL} console=ttyGS0,115200 console=tty1 ${deviceinfo_kernel_cmdline}"

	# create pmOS based boot.img for android fastboot
	#export pmos_ramdisk="/opt/build_postmarketos/pmb_work/chroot_rootfs_oneplus-cheeseburger/boot/initramfs-oneplus-msm8998"
	#[[ -f "${pmos_ramdisk}" ]] && create_fastboot_boot_img "boot.pmos" "${pmos_ramdisk}" "${deviceinfo_kernel_cmdline}"
}

user_config__add_avahi_daemon() {
	display_alert "Custom config stage" "user_config__add_avahi_daemon" "info"
	export PACKAGE_LIST_ADDITIONAL="${PACKAGE_LIST_ADDITIONAL} avahi-daemon"
}

user_config__disable_writing_sd_card() {
	display_alert "Custom config stage" "user_config__disable_writing_sd_card" "info"
	unset CARD_DEVICE
}

config_pre_customize_image__inject_initramfs_usb_gadget() {
	display_alert "Custom config stage" "config_pre_customize_image__inject_initramfs_usb_gadget" "info"
	local script_file_src="${USERPATCHES_PATH}/overlay/usb_gadget/usbgadget.sh"
	local script_file_dst="${SDCARD}/etc/initramfs-tools/scripts/init-premount/usbgadget.sh"
	cp "${script_file_src}" "${script_file_dst}"
	chmod +x "${script_file_dst}"
}

# last chance to modify mkopts and such, add labels to partitions
prepare_partitions_custom() {
	display_alert "Custom config stage" "prepare_partitions_custom" "info"
	display_alert "prepare_partitions_custom oneplus adding to mfks ext4" "Label: ${ROOT_FS_LABEL}" "info"
	mkopts[ext4]="-L ${ROOT_FS_LABEL} ${mkopts[ext4]}"
}

#### # We will need
#### # apt install android-sdk-libsparse-utils abootimg
####
#### ## boot.img (kernel - dtb - initramfs)
#### # 1. Concat the gzipped kernel (vmlinuz) and the DTB into Image.gz-dtb
#### # abootimg -u (updates the pmos image)
#### # abootimg -u /root/tempaboot/boot.img-oneplus-msm8998.new -k /opt/build_armbian/rpardini-stable/output/images/Armbian_21.08.0-trunk_Oneplus5_hirsute_current_5.11.14-g405914cfd470-dirty.boot/kernel.gz.dtb -c "bootsize=67108864"
#### # fastboot flash boot /root/tempaboot/boot.img-oneplus-msm8998.new
#### # fastboot reboot
#### # does not work with this armbian-built kernel. Does work with the pmos-built v5.10-lts mainline kernel, via the pmOs envkernel.sh helper script
#### # so I'll have to investigate that. for now I'll just use the built kernel.
#### # correction: it does work, with the correct .config
####
#### # cp /opt/build_postmarketos/pmb_work/chroot_rootfs_oneplus-cheeseburger/boot/boot.img-oneplus-msm8998 /root/tempaboot/boot.img-oneplus-msm8998.new
#### # cat /opt/build_postmarketos/mainline/linux-mainline-oneplus5/.output/arch/arm64/boot/Image.gz /opt/build_postmarketos/mainline/linux-mainline-oneplus5/.output/arch/arm64/boot/dts/qcom/msm8998-oneplus-cheeseburger.dtb > /root/mainline.kernel.gz.dtb
#### # abootimg -u /root/tempaboot/boot.img-oneplus-msm8998.new -k /root/mainline.kernel.gz.dtb -c "bootsize=67108864"
#### # fastboot flash boot /root/tempaboot/boot.img-oneplus-msm8998.new
####
#### # built debug-shell enabled...
#### # cp /opt/build_postmarketos/pmb_work/chroot_rootfs_oneplus-cheeseburger/boot/boot.img-oneplus-msm8998 /root/tempaboot/boot.img-oneplus-msm8998.new.debug
#### # cat /opt/build_postmarketos/mainline/linux-mainline-oneplus5/.output/arch/arm64/boot/Image.gz /opt/build_postmarketos/mainline/linux-mainline-oneplus5/.output/arch/arm64/boot/dts/qcom/msm8998-oneplus-cheeseburger.dtb > /root/mainline.kernel.gz.dtb
#### # abootimg -u /root/tempaboot/boot.img-oneplus-msm8998.new.debug -k /root/mainline.kernel.gz.dtb -c "bootsize=67108864"
#### # fastboot flash boot /root/tempaboot/boot.img-oneplus-msm8998.new.debug
####
#### # armbian-built debug-shell enabled
#### # cp /opt/build_postmarketos/pmb_work/chroot_rootfs_oneplus-cheeseburger/boot/boot.img-oneplus-msm8998 /root/tempaboot/boot.img-oneplus-msm8998.new.debug
#### # cat /opt/build_postmarketos/mainline/linux-mainline-oneplus5/.output/arch/arm64/boot/Image.gz /opt/build_postmarketos/mainline/linux-mainline-oneplus5/.output/arch/arm64/boot/dts/qcom/msm8998-oneplus-cheeseburger.dtb > /root/mainline.kernel.gz.dtb
#### # abootimg -u /root/tempaboot/boot.img-oneplus-msm8998.new.debug -k /root/mainline.kernel.gz.dtb -c "bootsize=67108864"
#### # fastboot flash boot /root/tempaboot/boot.img-oneplus-msm8998.new.debug
####
#### export ARMBIAN_BOOT="/opt/build_armbian/rpardini-stable/output/images/Armbian_21.08.0-trunk_Oneplus5_hirsute_edge_5.11.14-oneplus.boot"
#### cp /opt/build_postmarketos/pmb_work/chroot_rootfs_oneplus-cheeseburger/boot/boot.img-oneplus-msm8998 /root/tempaboot/boot.img-oneplus-msm8998.new.debug.armbian511
#### gzip -9 --keep --no-name ${ARMBIAN_BOOT}/vmlinuz-*
#### cat ${ARMBIAN_BOOT}/vmlinuz-*.gz ${ARMBIAN_BOOT}/dtb/qcom/msm8998-oneplus-cheeseburger.dtb > /root/mainline.kernel.gz.dtb
#### abootimg -u /root/tempaboot/boot.img-oneplus-msm8998.new.debug.armbian511 -k /root/mainline.kernel.gz.dtb -c "bootsize=67108864"
#### fastboot flash boot /root/tempaboot/boot.img-oneplus-msm8998.new.debug.armbian511
####
#### # original
#### cp /opt/build_postmarketos/pmb_work/chroot_rootfs_oneplus-cheeseburger/boot/boot.img-oneplus-msm8998 /root/tempaboot/boot.img-oneplus-msm8998.new.debug.original
#### fastboot flash boot /root/tempaboot/boot.img-oneplus-msm8998.new.debug.original
#### # results: slow (100mbit or less) usb networking, a shitload of errors including missing firmware.
####
####
#### # ok, lets now create the boot.img from "stratch" using the initramfs from pmos
#### # gzip -9 --keep --no-name ${ARMBIAN_BOOT}/vmlinuz-*
#### cat ${ARMBIAN_BOOT}/vmlinuz-*.gz ${ARMBIAN_BOOT}/dtb/qcom/msm8998-oneplus-cheeseburger.dtb > /root/mainline.kernel.gz.dtb
####
#### # --create <bootimg> [-c "param=value"] [-f <bootimg.cfg>] -k <kernel> -r <ramdisk> [-s <secondstage>]
#### abootimg \
#### 	--create /root/tempaboot/boot.img-oneplus-msm8998.fromscratch \
#### 	-c "bootsize=67108864" \
#### 	-k /root/mainline.kernel.gz.dtb \
#### 	-r /opt/build_postmarketos/pmb_work/chroot_rootfs_oneplus-cheeseburger/boot/initramfs-oneplus-msm8998
####
#### ## # mkbootimg --help
#### ## usage: mkbootimg [-h] --kernel KERNEL [--ramdisk RAMDISK] [--second SECOND] [--dtb DTB]
#### ##                  [--recovery_dtbo RECOVERY_DTBO | --recovery_acpio RECOVERY_ACPIO] [--cmdline CMDLINE]
#### ##                  [--base BASE] [--kernel_offset KERNEL_OFFSET] [--ramdisk_offset RAMDISK_OFFSET]
#### ##                  [--second_offset SECOND_OFFSET] [--dtb_offset DTB_OFFSET] [--os_version OS_VERSION]
#### ##                  [--os_patch_level OS_PATCH_LEVEL] [--tags_offset TAGS_OFFSET] [--board BOARD]
#### ##                  [--pagesize {2048,4096,8192,16384}] [--id] [--header_version HEADER_VERSION] -o OUTPUT
#### ##
####
#### # Bootloader related [WORKS!]
#### export deviceinfo_kernel_cmdline="androidboot.hardware=qcom user_debug=31 msm_rtb.filter=0x37 ehci-hcd.park=3 lpm_levels.sleep_disabled=1 sched_enable_hmp=1 sched_enable_power_aware=1 service_locator.enable=1 swiotlb=2048 androidboot.usbconfigfs=true androidboot.usbcontroller=a800000.dwc3 firmware_class.path=/vendor/firmware_mnt/image loop.max_part=7 ramoops.mem_address=0xac000000 ramoops.mem_size=0x200000 ramoops.console_size=0x40000"
#### export deviceinfo_flash_offset_base="0x00000000"
#### export deviceinfo_flash_offset_kernel="0x00008000"
#### export deviceinfo_flash_offset_ramdisk="0x01000000"
#### export deviceinfo_flash_offset_second="0x00f00000"
#### export deviceinfo_flash_offset_tags="0x00000100"
#### export deviceinfo_flash_pagesize="4096"
#### export deviceinfo_flash_sparse="true"
####
#### export kernelfile="/root/mainline.kernel.gz.dtb"
#### export ramdisk="/opt/build_postmarketos/pmb_work/chroot_rootfs_oneplus-cheeseburger/boot/initramfs-oneplus-msm8998"
#### export output="/root/tempaboot/boot.img-oneplus-msm8998.fromscratch.mkbootimg"
####
#### [[ -f "${output}" ]] && rm "${output}"
####
#### mkbootimg \
#### 	--kernel "${kernelfile}" \
#### 	--ramdisk "${ramdisk}" \
#### 	--base "${deviceinfo_flash_offset_base}" \
#### 	--second_offset "${deviceinfo_flash_offset_second}" \
#### 	--cmdline "${deviceinfo_kernel_cmdline}" \
#### 	--kernel_offset "${deviceinfo_flash_offset_kernel}" \
#### 	--ramdisk_offset "${deviceinfo_flash_offset_ramdisk}" \
#### 	--tags_offset "${deviceinfo_flash_offset_tags}" \
#### 	--pagesize "${deviceinfo_flash_pagesize}" \
#### 	-o "${output}"
####
#### fastboot flash boot "${output}"
####
####
####
####
####
####
####
####
#### ## root.img (/boot + rootfs msdos partition)
####
#### # modifying the pmos rootimg seems easier, but isnt, lets create a new image.
####
#### # deviceinfo_rootfs_image_sector_size="4096"
#### # deviceinfo_flash_pagesize="4096"
####
####
####
####
####
####
####
####

# while true; do ifconfig usb0 up 172.16.42.2 netmask 255.255.255.0 && telnet 172.16.42.1; sleep 1; done
# ifconfig usb0 up 172.16.42.2 netmask 255.255.255.0; sysctl net.ipv4.ip_forward=1; iptables -P FORWARD ACCEPT; iptables -A POSTROUTING -t nat -j MASQUERADE -s 172.16.42.0/24
