# common stuff for all my builds. activates a bunch of fragments.
source common-rpardini.conf

# @TODO: this should be moved to the board.conf or family.conf
add_fragment "fastboot_image"
add_fragment "initramfs_usb_gadget"


# @TODO: either - make sure the host has the needed tools (abootimg, mkimage, etc), apt install abootimg
# @TODO:     or - move the whole android-specific stuff inside the image and run during update-initramfs
# @TODO: extract the usbgadget into its own fragment.
# @TODO: extract the fastboot stuff into its own fragment (either host or device based, maybe both)
# @TODO: use decent var names. early ones were rips from pmOS. (or: just curl/source the deviceinfo from there)

###
### Configuration. Points to the board, which has all the HW specific details, like DTBs etc.
###
export BOARD=oneplus5 # a new 'board'. you'll soon discover truths.
export WIREGUARD=no   # No wireguard for this build. Why? Ask me later

export BRANCH=edge # 5.11 with its own config file... (I get no text console with this one, only OP Android logo)
#export BRANCH=current # 5.10-lts with its own config file... (video works)


# To configure (make menuconfig) and watch kernel+others build progress... its a lot of scrolling.
#export KERNEL_CONFIGURE=yes
#export PROGRESS_DISPLAY=allofit

# Bootloader related, ripped from pmos deviceinfo file. @TODO: move into board.conf
export deviceinfo_kernel_cmdline="androidboot.hardware=qcom user_debug=31 msm_rtb.filter=0x37 ehci-hcd.park=3 lpm_levels.sleep_disabled=1 sched_enable_hmp=1 sched_enable_power_aware=1 service_locator.enable=1 swiotlb=2048 androidboot.usbconfigfs=true androidboot.usbcontroller=a800000.dwc3 firmware_class.path=/vendor/firmware_mnt/image loop.max_part=7 ramoops.mem_address=0xac000000 ramoops.mem_size=0x200000 ramoops.console_size=0x40000"
export deviceinfo_flash_offset_base="0x00000000"
export deviceinfo_flash_offset_kernel="0x00008000"
export deviceinfo_flash_offset_ramdisk="0x01000000"
export deviceinfo_flash_offset_second="0x00f00000"
export deviceinfo_flash_offset_tags="0x00000100"
export deviceinfo_flash_pagesize="4096"
export deviceinfo_flash_sparse="true"

# @TODO: total anomaly, refactor after fragments are done.
board_determine_cloud_init_network_config_template() {
	# Default to using usb0 with a static IP. effectively no networking, but the user can access it via ssh.
	# If user goes all the way, they can set up dnsmasq/iptables etc to forward traffic to the internet.
	# But then it probably is easier to just bridge hosts eth0 and usb0 together and use usb0-dhcp.
	export CLOUD_INIT_NET_CONFIG_FILE="usb0-staticip"
	display_alert "c-i network-config" "${CLOUD_INIT_NET_CONFIG_FILE}" "info"
}

