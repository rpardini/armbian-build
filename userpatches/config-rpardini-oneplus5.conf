# include all fragments. they have functions and default values, used below.
source fragment-common-settings.conf

# @TODO: either - make sure the host has the needed tools (abootimg, mkimage, etc), apt install abootimg
# @TODO:     or - move the whole android-specific stuff inside the image and run during update-initramfs
# @TODO: extract the usbgadget into its own fragment.
# @TODO: extract the fastboot stuff into its own fragment (either host or device based, maybe both)
# @TODO: use decent var names. early ones were rips from pmOS. (or: just curl/source the deviceinfo from there)

###
### Configuration. Points to the board, which has all the HW specific details, like DTBs etc.
###
export BOARD=oneplus5 # a new 'board'. you'll soon discover truths.
export WIREGUARD=no   # No wireguard for this build. Why? Ask me later

export BRANCH=edge # 5.11 with its own config file... (I get no text console with this one, only OP Android logo)
#export BRANCH=current # 5.10-lts with its own config file... (video works)

# We need to label the rootFS with an ext4 label so that we can find it, both at system and at userdata partitions.
# The user can choose where to flash it when it comes to fastboot flash.
# It is indeed hardcoded into the kernel cmdline, so the boot and rootfs images have to match.
export ROOT_FS_LABEL="Armbian_root"

# To configure (make menuconfig) and watch kernel+others build progress... its a lot of scrolling.
export KERNEL_CONFIGURE=yes
export PROGRESS_DISPLAY=allofit

# Bootloader related, ripped from pmos deviceinfo file
export deviceinfo_kernel_cmdline="androidboot.hardware=qcom user_debug=31 msm_rtb.filter=0x37 ehci-hcd.park=3 lpm_levels.sleep_disabled=1 sched_enable_hmp=1 sched_enable_power_aware=1 service_locator.enable=1 swiotlb=2048 androidboot.usbconfigfs=true androidboot.usbcontroller=a800000.dwc3 firmware_class.path=/vendor/firmware_mnt/image loop.max_part=7 ramoops.mem_address=0xac000000 ramoops.mem_size=0x200000 ramoops.console_size=0x40000"
export deviceinfo_flash_offset_base="0x00000000"
export deviceinfo_flash_offset_kernel="0x00008000"
export deviceinfo_flash_offset_ramdisk="0x01000000"
export deviceinfo_flash_offset_second="0x00f00000"
export deviceinfo_flash_offset_tags="0x00000100"
export deviceinfo_flash_pagesize="4096"
export deviceinfo_flash_sparse="true"

board_determine_cloud_init_network_config_template() {
	# Default to using usb0 with a static IP. effectively no networking, but the user can access it via ssh.
	# If user goes all the way, they can set up dnsmasq/iptables etc to forward traffic to the internet.
	# But then it probably is easier to just bridge hosts eth0 and usb0 together and use usb0-dhcp.
	export CLOUD_INIT_NET_CONFIG_FILE="usb0-staticip"
	display_alert "c-i network-config" "${CLOUD_INIT_NET_CONFIG_FILE}" "info"
}

# early config hook, after family set variables. used for overrides of stuff that is blindly set in the board/family
config_tweaks_post_family_config() {
	display_alert "Custom config stage" "config_tweaks_post_family_config" "info"
	# @TODO: move into usbgadget fragment
	export SERIALCON="ttyGS0" # This is a serial USB gadget that will be setup by the initramfs, after kernel booted, but before switching into rootfs.
}

# not so early hook
user_config() {
	display_alert "Custom config stage" "user_config" "info"
	user_config__enable_cloudinit
	user_config__add_avahi_daemon
	user_config__disable_all_image_fingerprints_and_compression
}

user_config__disable_all_image_fingerprints_and_compression() {
	display_alert "Custom config stage" "user_config__disable_all_image_fingerprints_and_compression" "info"
	export COMPRESS_OUTPUTIMAGE=none_at_all_hopefully
}

user_config_post_aggregate_packages() {
	display_alert "Custom config stage" "user_config_post_aggregate_packages" "info"
	user_config_post_aggregate_packages__confirm_cloudinit_packages
}

# This is run inside the chroot building the bsp (armbian-config) package.
# Stuff done here will persist across reinstalls of the bsp package.
# Stuff done in image_tweaks_pre_customize() only applies to rootfs on the SD card.
config_tweaks_bsp() {
	display_alert "Custom config stage" "config_tweaks_bsp" "info"
	config_tweaks_bsp__be_more_like_ubuntu_cloud
}

# This runs after install_common() and chroot_installpackages_local()
# Inside customize_image(), before running the actual custom script.
# *We dont use the custom script* so ***actual image customization is done here***
# not clear what happens after this? see below
image_tweaks_pre_customize() {
	display_alert "Custom config stage" "image_tweaks_pre_customize" "info"
	image_tweaks_pre_customize__cloud_init
}

# almost the last thing before copying to SD.
# this is called by post_debootstrap_tweaks() after ${SDCARD} is chroot_unmounted
# -> which is called by  debootstrap_ng() before prepare_partitions()/create_image()
# -> tmpfs is still going at this point.
config_post_debootstrap_tweaks() {
	display_alert "Custom config stage" "config_post_debootstrap_tweaks" "info"
	config_post_debootstrap_tweaks__hack_armbianEnv_ci_args
	config_post_debootstrap_tweaks__make_sure_hostapd_behaves
	config_post_debootstrap_tweaks__restore_systemd_resolved_from_resolvconf_and_armbian
}

config_pre_install_distribution_specific() {
	display_alert "Custom config stage" "config_pre_install_distribution_specific" "info"
	config_pre_install_distribution_specific__preserve_pristine_etc_systemd
}

config_pre_customize_image() {
	display_alert "Custom config stage" "config_pre_customize_image" "info"
	config_pre_customize_image__restore_preserved_systemd_and_netplan_stuff
	config_pre_customize_image__inject_initramfs_usb_gadget
}

config_post_install_kernel_debs() {
	display_alert "Custom config stage" "config_post_install_kernel_debs" "info"
	config_post_install_kernel_debs__copy_headers_deb_to_rootfs
}

config_pre_umount_final_image() {
	display_alert "Custom config stage" "config_pre_umount_final_image ${BASH_SOURCE%}" "info"
	config_pre_umount_final_image__androidfastboot_extract_kernel
}

config_post_umount_final_image() {
	display_alert "Custom config stage" "config_post_umount_final_image ${BASH_SOURCE%}" "info"
	config_post_umount_final_image___extract_pure_ext4_image_from_partitioned_loop
}

config_post_umount_final_image___extract_pure_ext4_image_from_partitioned_loop() {
	display_alert "Custom config stage" "config_post_umount_final_image___extract_pure_ext4_image_from_partitioned_loop" "info"
	local wanted_partition="${LOOP}p1"
	local dest_img_file="${DEST}/images/${version}.fastboot.rootfs.img"
	pv -N "[ .... ] dd" "${wanted_partition}" >"${dest_img_file}"
}

create_fastboot_boot_img() {
	local id="$1"      # boot
	local ramdisk="$2" # ramdisk
	local cmdline="$3" # deviceinfo_kernel_cmdline
	local dest_output="${DEST}/images/${version}.fastboot.${id}.img"
	local boot_output="${MOUNT}/boot/fastboot.${id}.img"

	mkbootimg \
		--kernel "$MOUNT"/boot/vmlinuz.gz.dtb \
		--ramdisk "${ramdisk}" \
		--base "${deviceinfo_flash_offset_base}" \
		--second_offset "${deviceinfo_flash_offset_second}" \
		--cmdline "${cmdline}" \
		--kernel_offset "${deviceinfo_flash_offset_kernel}" \
		--ramdisk_offset "${deviceinfo_flash_offset_ramdisk}" \
		--tags_offset "${deviceinfo_flash_offset_tags}" \
		--pagesize "${deviceinfo_flash_pagesize}" \
		-o "${boot_output}"

	# Copy to dest too, since user will need to flash it via fastboot.
	cp "${boot_output}" "${dest_output}"
	display_alert "Android boot.img for fastboot" "${id}: .fastboot.${id}.img suffix" "info"

}

config_pre_umount_final_image__androidfastboot_extract_kernel() {
	display_alert "Custom config stage" "config_pre_umount_final_image__androidfastboot_extract_kernel" "info"

	# fastboot boot wants the gzipped kernel and concatenated dtb at the end. don't ask questions.
	gzip -9 --keep --no-name "$MOUNT"/boot/vmlinuz-*
	cat "$MOUNT"/boot/vmlinuz-*.gz "$MOUNT"/boot/dtb/"${BOOT_FDT_FILE}" >"$MOUNT"/boot/vmlinuz.gz.dtb

	# Prepare the android boot.img using mkbootimg -- this probably should move into initramfs generation,
	# create Armbian based boot.img for android fastboot.
	create_fastboot_boot_img "boot" "$MOUNT"/boot/initrd.img-* "root=LABEL=${ROOT_FS_LABEL} console=ttyGS0,115200 console=tty1 ${deviceinfo_kernel_cmdline}"
}

user_config__add_avahi_daemon() {
	display_alert "Custom config stage" "user_config__add_avahi_daemon" "info"
	export PACKAGE_LIST_ADDITIONAL="${PACKAGE_LIST_ADDITIONAL} avahi-daemon"
}

# Terrible, we need a better way.
post_build_image() {
	post_build_image___discard_full_image
}

# the real images have been produced elsewhere (.fastboot.boot and .fastboot.rootfs .imgs)
post_build_image___discard_full_image() {
	display_alert "Custom config stage" "post_build_image___discard_full_image" "info"
	[[ -f "${FINALDEST}/${version}.img" ]] && {
		rm -f "${FINALDEST}/${version}.img"
		rm -f "${FINALDEST}/${version}.img.txt"
	}
}

# @TODO: document the usb gadget with example cmdlines for the host, like
# ifconfig usb0 up 172.16.42.2 netmask 255.255.255.0; sysctl net.ipv4.ip_forward=1; iptables -P FORWARD ACCEPT; iptables -A POSTROUTING -t nat -j MASQUERADE -s 172.16.42.0/24
config_pre_customize_image__inject_initramfs_usb_gadget() {
	display_alert "Custom config stage" "config_pre_customize_image__inject_initramfs_usb_gadget" "info"
	local script_file_src="${USERPATCHES_PATH}/overlay/usb_gadget/usbgadget.sh"
	local script_file_dst="${SDCARD}/etc/initramfs-tools/scripts/init-premount/usbgadget.sh"
	cp "${script_file_src}" "${script_file_dst}"
	chmod +x "${script_file_dst}"
}

# last chance to modify mkopts and such, add labels to partitions
prepare_partitions_custom() {
	display_alert "Custom config stage" "prepare_partitions_custom" "info"
	display_alert "prepare_partitions_custom oneplus adding to mfks ext4" "Label: ${ROOT_FS_LABEL}" "info"
	mkopts[ext4]="-L ${ROOT_FS_LABEL} ${mkopts[ext4]}"
}
