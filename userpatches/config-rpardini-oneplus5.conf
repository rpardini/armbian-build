# include all fragments. they have functions and default values, used below.
source fragment-common-settings.conf

###
### Configuration. Points to the board, which has all the HW specific details, like DTBs etc.
###
export BOARD=oneplus5 # a new 'board'. you'll soon discover truths.

export BRANCH=current

export KERNEL_CONFIGURE=yes
unset PROGRESS_DISPLAY

export REPOSITORY_INSTALL="u-boot,kernel"
export REPOSITORY_INSTALL="u-boot"

# early config hook, after family set variables. used for overrides
config_tweaks_post_family_config() {
	display_alert "Custom config stage" "config_tweaks_post_family_config" "info"
	# Use different U-boot.
	# export BOOTBRANCH="tag:v2021.01"

	# use specific KERNELBRANCH
	#export KERNELBRANCH='tag:v5.10.23' # 23 works, but 27 does not. 25 does not work. 24 does not work. 24 is guilty!
	#export KERNELDIR='linux-v5.10.23'
}

# not so early hook
user_config() {
	display_alert "Custom config stage" "user_config" "info"
	user_config__enable_cloudinit
}

user_config_post_aggregate_packages() {
	display_alert "Custom config stage" "user_config_post_aggregate_packages" "info"
	user_config_post_aggregate_packages__confirm_cloudinit_packages
}

# This is run inside the chroot building the bsp (armbian-config) package.
# Stuff done here will persist across reinstalls of the bsp package.
# Stuff done in image_tweaks_pre_customize() only applies to rootfs on the SD card.
config_tweaks_bsp() {
	display_alert "Custom config stage" "config_tweaks_bsp" "info"
	config_tweaks_bsp__be_more_like_ubuntu_cloud
}

# This runs after install_common() and chroot_installpackages_local()
# Inside customize_image(), before running the actual custom script.
# *We dont use the custom script* so ***actual image customization is done here***
# not clear what happens after this? see below
image_tweaks_pre_customize() {
	display_alert "Custom config stage" "image_tweaks_pre_customize" "info"
	image_tweaks_pre_customize__cloud_init
}

# almost the last thing before copying to SD.
# this is called by post_debootstrap_tweaks() after ${SDCARD} is chroot_unmounted
# -> which is called by  debootstrap_ng() before prepare_partitions()/create_image()
# -> tmpfs is still going at this point.
config_post_debootstrap_tweaks() {
	display_alert "Custom config stage" "config_post_debootstrap_tweaks" "info"
	config_post_debootstrap_tweaks__hack_armbianEnv_ci_args
	config_post_debootstrap_tweaks__make_sure_hostapd_behaves
	config_post_debootstrap_tweaks__restore_systemd_resolved_from_resolvconf_and_armbian
}

config_pre_install_distribution_specific() {
	display_alert "Custom config stage" "config_pre_install_distribution_specific" "info"
	config_pre_install_distribution_specific__preserve_pristine_etc_systemd
}

config_pre_customize_image() {
	display_alert "Custom config stage" "config_pre_customize_image" "info"
	config_pre_customize_image__restore_preserved_systemd_and_netplan_stuff
}

config_post_install_kernel_debs() {
	display_alert "Custom config stage" "config_post_install_kernel_debs" "info"
	config_post_install_kernel_debs__copy_headers_deb_to_rootfs
}

config_pre_umount_final_image() {
	display_alert "Custom config stage" "config_pre_umount_final_image 22 ${BASH_SOURCE%}" "info"
	config_pre_umount_final_image__prepare_rootfs_inside_rootfs
	config_pre_umount_final_image__androidfastboot_extract_kernel
}

config_pre_umount_final_image__androidfastboot_extract_kernel() {
	display_alert "Custom config stage" "config_pre_umount_final_image__androidfastboot_extract_kernel ${BASH_SOURCE%}" "info"

	# For now I'll just copy /boot to target until I figure out what I really need from it.
	[[ -d "${DEST}/images/${version}.boot" ]] && rf -rf "${DEST}/images/${version}.boot"
	cp -rvp $MOUNT/boot "${DEST}/images/${version}.boot"

	# For now I'll just copy root to target until I figure out what I really need from it. 
	[[ -d "${DEST}/images/${version}.root" ]] && rf -rf "${DEST}/images/${version}.root"
	cp -rvp "$MOUNT" "${DEST}/images/${version}.root"

	echo "Running bash..."
	export MOUNT
	export DEST
	bash
}

# We will need
# apt install android-sdk-libsparse-utils abootimg

## boot.img (kernel - dtb - initramfs)
# 1. Concat the gzipped kernel (vmlinuz) and the DTB into Image.gz-dtb
# abootimg -u (updates the pmos image)
# abootimg -u /root/tempaboot/boot.img-oneplus-msm8998.new -k /opt/build_armbian/rpardini-stable/output/images/Armbian_21.08.0-trunk_Oneplus5_hirsute_current_5.11.14-g405914cfd470-dirty.boot/kernel.gz.dtb -c "bootsize=67108864"
# fastboot flash boot /root/tempaboot/boot.img-oneplus-msm8998.new
# fastboot reboot
# @TODO: does not work with this armbian-built kernel. Does work with the pmos-built v5.10-lts mainline kernel, via the pmOs envkernel.sh helper script
# @TODO: so I'll have to investigate that. for now I'll just use the built kernel.

# cp /opt/build_postmarketos/pmb_work/chroot_rootfs_oneplus-cheeseburger/boot/boot.img-oneplus-msm8998 /root/tempaboot/boot.img-oneplus-msm8998.new
# cat /opt/build_postmarketos/mainline/linux-mainline-oneplus5/.output/arch/arm64/boot/Image.gz /opt/build_postmarketos/mainline/linux-mainline-oneplus5/.output/arch/arm64/boot/dts/qcom/msm8998-oneplus-cheeseburger.dtb > /root/mainline.kernel.gz.dtb 
# abootimg -u /root/tempaboot/boot.img-oneplus-msm8998.new -k /root/mainline.kernel.gz.dtb -c "bootsize=67108864"
# fastboot flash boot /root/tempaboot/boot.img-oneplus-msm8998.new

# built debug-shell enabled...
# cp /opt/build_postmarketos/pmb_work/chroot_rootfs_oneplus-cheeseburger/boot/boot.img-oneplus-msm8998 /root/tempaboot/boot.img-oneplus-msm8998.new.debug
# cat /opt/build_postmarketos/mainline/linux-mainline-oneplus5/.output/arch/arm64/boot/Image.gz /opt/build_postmarketos/mainline/linux-mainline-oneplus5/.output/arch/arm64/boot/dts/qcom/msm8998-oneplus-cheeseburger.dtb > /root/mainline.kernel.gz.dtb 
# abootimg -u /root/tempaboot/boot.img-oneplus-msm8998.new.debug -k /root/mainline.kernel.gz.dtb -c "bootsize=67108864"
# fastboot flash boot /root/tempaboot/boot.img-oneplus-msm8998.new.debug







## root.img (/boot + rootfs msdos partition)

# modifying the pmos rootimg seems easier, but isnt, lets create a new image.

# deviceinfo_rootfs_image_sector_size="4096"
# deviceinfo_flash_pagesize="4096"











