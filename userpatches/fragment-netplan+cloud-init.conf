display_alert "Activating fragment" "fragment-netplan+cloud-init" "info"

# Config for cloud-init.
export CLOUD_INIT_USER_DATA_URL="files"   # "files" to use config files, or an URL to go straight to it
export CLOUD_INIT_CONFIG_LOCATION="/boot" # where on the sdcard c-i will look for user-data, network-config, meta-data files

# This runs after install_common() and chroot_installpackages_local()
# Inside customize_image(), before running the actual custom script.
# We dont use the custom script so actual image customization is done here
# not clear what happens after this? see below
image_tweaks_pre_customize__cloud_init() {
	display_alert "Custom config stage" "image_tweaks_pre_customize__cloud_init" "info"

	# cloud-init stuff; copy from overlay
	echo -e "# configure cloud-init for NoCloud\ndatasource_list: [ NoCloud, None ]\ndatasource:\n  NoCloud: # vfat has a 11-char limit, how convenient\n    dsmode: local\n    seedfrom: /boot/" >>"${SDCARD}"/etc/cloud/cloud.cfg.d/99-armbian.cfg
	#cat "${SDCARD}"/etc/cloud/cloud.cfg.d/99-armbian.cfg

	cp "${USERPATCHES_PATH}/overlay/cloud-init/user-config-default/meta-data" "${SDCARD}${CLOUD_INIT_CONFIG_LOCATION}"/meta-data
	echo "instance_id: armbian-${BOARD}" >>"${SDCARD}${CLOUD_INIT_CONFIG_LOCATION}"/meta-data
	echo "instance-id: armbian-${BOARD}" >>"${SDCARD}${CLOUD_INIT_CONFIG_LOCATION}"/meta-data
	#cat "${SDCARD}${CLOUD_INIT_CONFIG_LOCATION}"/meta-data

	cp "${USERPATCHES_PATH}"/overlay/cloud-init/user-config-default/user-data "${SDCARD}${CLOUD_INIT_CONFIG_LOCATION}"/user-data
	cp "${USERPATCHES_PATH}"/overlay/cloud-init/user-config-default/network-config "${SDCARD}${CLOUD_INIT_CONFIG_LOCATION}"/network-config

	# overwrite default (user-oriented) user-data with direct #include via CLOUD_INIT_USER_DATA_URL
	if [[ "a${CLOUD_INIT_USER_DATA_URL}" != "afiles" ]]; then
		display_alert "Cloud-init user-data points directly to" "${CLOUD_INIT_USER_DATA_URL}" "wrn"
		echo -e "#include\n${CLOUD_INIT_USER_DATA_URL}" >"${SDCARD}${CLOUD_INIT_CONFIG_LOCATION}"/user-data
		#cat "${SDCARD}${CLOUD_INIT_CONFIG_LOCATION}"/user-data
	fi
}

# not so early hook
user_config__enable_cloudinit() {
	display_alert "Custom config stage" "user_config__enable_cloudinit" "info"

	# Release specific packages
	DEBOOTSTRAP_COMPONENTS="main,universe" # @TODO: ,backports ?
	DEBOOTSTRAP_LIST+=" rng-tools fdisk"

	# Replace ifupdown with netplan during deboostrap.
	DEBOOTSTRAP_LIST="${DEBOOTSTRAP_LIST//ifupdown/netplan.io}"

	# Remove some stuff not available in hirsute... @TODO: check groovy
	PACKAGE_LIST_ADDITIONAL="${PACKAGE_LIST_ADDITIONAL//iozone3/}"

	# Remove stuff that makes no sense with cloud-init
	PACKAGE_LIST_ADDITIONAL="${PACKAGE_LIST_ADDITIONAL//hostapd/}" # Hmm and somehow it is still there
	PACKAGE_LIST_ADDITIONAL="${PACKAGE_LIST_ADDITIONAL//network-manager/}"
	PACKAGE_LIST_ADDITIONAL="${PACKAGE_LIST_ADDITIONAL//ifenslave/}"

	# Add something just to burn cache
	PACKAGE_LIST_ADDITIONAL="${PACKAGE_LIST_ADDITIONAL} figlet"

	# Normally:
	PACKAGE_LIST_RELEASE="kbd networkd-dispatcher"

	# Remove hostapd for the love of god.
	PACKAGE_LIST_BOARD_REMOVE="hostapd"

	# Show lists:
	display_alert "Package list DEBOOTSTRAP_LIST           " "${DEBOOTSTRAP_LIST}" "info"
	display_alert "Package list PACKAGE_LIST               " "${PACKAGE_LIST}" "info"
	display_alert "Package list PACKAGE_LIST_ADDITIONAL    " "${PACKAGE_LIST_ADDITIONAL}" "info"
	display_alert "Package list PACKAGE_LIST_RELEASE       " "${PACKAGE_LIST_RELEASE}" "info"
	display_alert "Package list PACKAGE_LIST_FAMILY        " "${PACKAGE_LIST_FAMILY}" "info"
	display_alert "Package list PACKAGE_LIST_BOARD         " "${PACKAGE_LIST_BOARD}" "info"
	display_alert "Package list PACKAGE_LIST_FAMILY_REMOVE " "${PACKAGE_LIST_FAMILY_REMOVE}" "info"
	display_alert "Package list PACKAGE_LIST_BOARD_REMOVE  " "${PACKAGE_LIST_BOARD_REMOVE}" "info"

	# Enable cloud-init; this changes bring-up process radically
	PACKAGE_LIST_ADDITIONAL="${PACKAGE_LIST_ADDITIONAL} cloud-init cloud-initramfs-growroot eatmydata curl tree"
}

# almost the last thing before copying to SD.
# this is called by post_debootstrap_tweaks() after ${SDCARD} is chroot_unmounted
# -> which is called by  debootstrap_ng() before prepare_partitions()/create_image()
# -> tmpfs is still going at this point.
config_post_debootstrap_tweaks__hack_armbianEnv_ci_args() {
	display_alert "Custom config stage" "config_post_debootstrap_tweaks__hack_armbianEnv_ci_args" "info"

	# This really is used
	echo "extraboardargs=${EXTRACMDLINE_JUMPSTART}" >>"${SDCARD}"/boot/armbianEnv.txt

	# This is just there for the future
	echo "extraboardargs=${EXTRACMDLINE_JUMPSTART}" >>"${SDCARD}"/boot/armbianEnv.txt
	echo "extraboardargsemmc=${EXTRACMDLINE_EMMC}" >>"${SDCARD}"/boot/armbianEnv.txt
	#cat "${SDCARD}"/boot/armbianEnv.txt
}

# almost the last thing before copying to SD.
# this is called by post_debootstrap_tweaks() after ${SDCARD} is chroot_unmounted
# -> which is called by  debootstrap_ng() before prepare_partitions()/create_image()
# -> tmpfs is still going at this point.
config_post_debootstrap_tweaks__make_sure_hostapd_behaves() {
	display_alert "Custom config stage" "config_post_debootstrap_tweaks__make_sure_hostapd_behaves" "info"

	# hostapd REALLY should not be here @TODO: find out really what is installing it and remove this
	[[ -f "${SDCARD}"/etc/systemd/system/multi-user.target.wants/hostapd.service ]] &&
		rm -f "${SDCARD}"/etc/systemd/system/multi-user.target.wants/hostapd.service

	[[ -f "${SDCARD}"/lib/systemd/system/hostapd.service ]] &&
		rm -f "${SDCARD}"/lib/systemd/system/hostapd.service

	[[ -f "${SDCARD}"/etc/init.d/hostapd ]] &&
		rm -f "${SDCARD}"/etc/init.d/hostapd

	#echo "tree for ${SDCARD}/etc/systemd/ "
	#tree "${SDCARD}"/etc/systemd
	#echo "tree for ${SDCARD}/lib/systemd "
	#tree "${SDCARD}"/lib/systemd
}
