# include all fragments. they have functions and default values, used below.
source fragment-common-settings.conf
source fragment-jumpstart-sd-boot.sh # t95z needs a jumpstart. go see.

###
### Configuration. Points to the board, which has all the HW specific details, like DTBs etc.
###
export BOARD=t95z
export RELEASE=groovy
export SERIALCON="ttyAML0"
export DEFAULT_CONSOLE="serial"

# More stuff I dunno if works...
export ROOTPWD="123@#aB"
export TZDATA="Europe/Amsterdam"

# Extra config.
export EXTRACMDLINE_JUMPSTART="oldskool.boot.type=sd" # Extra kernel cmdline to add to jumpstart/sd boot, before flashing to eMMC.
export EXTRACMDLINE_EMMC="oldskool.boot.type=mmc"     # Extra kernel cmdline to add to emmc boot, after jumpstart.

###
### Jumpstart config.
###
# The jumpstart binary package ID. We use balbes150's last known good binary build.
export JUMPSTART_ID="5.9.0-arm-64-balbeslast" # This is the .tar.xz containing the binaries from balbe150's last built.

# This will be the DTB used *during* jumpstart (boot from SD) and should be a balbe150 dtb in the overlays.
export JUMPSTART_DTB="tvbox/t95z-plus-meson-gxm-q200-giga-eth.dtb" # Use the q200+n1+eth DTB so we can write to eMMC after booting from SD. Damn shared GPIOs

# The balbe150 u-boot that will be installed as u-boot.ext on the SD jumpstart
export JUMPSTART_UBOOT="u-boot-s905x-s912" # theres others there. check.


### Which extlinux, and thus, which kernel, to use for each phase (jumpstart on sd/emmc)
# Balbes known last build for SD jumpstart...
#export CHOSEN_EXTLINUX_JUMPSTART="extlinux-jumpstart-balbe.conf"
# Own built kernel for SD jumpstart.
export CHOSEN_EXTLINUX_JUMPSTART="extlinux-jumpstart-built-kernel.conf"
# Own built kernel for eMMC final target.
export CHOSEN_EXTLINUX_EMMC="extlinux-emmc-built-kernel.conf"

# This specific board has a binary known-good eMMC bootloader image, from original Android firmware.
# Set to "use_current_emmc_bootloader" (literally) if you have a working eMMC bootloader and want to keep that.
# Note: if you have booted CoreELEC, it has mucked with the bootloader, and your system won't be able to boot.
# Flash the original Android Firmware first then use the SD jumpstart card.
# Understand: if you don't have the exact hardware, using a given bootloader (instead of use_current_emmc_bootloader)
#             image will BRICK YOUR BOX.
#             I use this so I can switch from CoreELEC (on SD) to Armbian on eMMC without re-flashing Android.
export EMMC_KNOWN_GOOD_BOOTLOADER_EMMC="use_current_emmc_bootloader"
export EMMC_KNOWN_GOOD_BOOTLOADER_EMMC="t95z_working_uboot.img" # which is a bad name, its BLxx stuff not u-boot.


# early config hook, after family set variables. used for overrides
# @TODO: not really used when jumpstarting, for obvious reasons (no armbianEnv.txt for one)
config_tweaks_post_family_config() {
	display_alert "Custom config stage" "config_tweaks_post_family_config" "info"
	# My own bootscript (seeds armbianEnv.txt)
	export BOOTENV_FILE='serial_debug.txt'
}

# not so early hook
user_config() {
	display_alert "Custom config stage" "user_config" "info"
	user_config__enable_cloudinit
}

# This is run inside the chroot building the bsp (armbian-config) package.
# Stuff done here will persist across reinstalls of the bsp package.
# Stuff done in image_tweaks_pre_customize() only applies to rootfs on the SD card.
config_tweaks_bsp() {
	display_alert "Custom config stage" "config_tweaks_bsp" "info"
	config_tweaks_bsp__be_more_like_ubuntu_cloud
}

# This runs after install_common() and chroot_installpackages_local()
# Inside customize_image(), before running the actual custom script.
# *We dont use the custom script* so ***actual image customization is done here***
# not clear what happens after this? see below
image_tweaks_pre_customize() {
	display_alert "Custom config stage" "image_tweaks_pre_customize" "info"
	image_tweaks_pre_customize__cloud_init
	image_tweaks_pre_customize__jumpstart
}

# almost the last thing before copying to SD.
# this is called by post_debootstrap_tweaks() after ${SDCARD} is chroot_unmounted
# -> which is called by  debootstrap_ng() before prepare_partitions()/create_image()
# -> tmpfs is still going at this point.
config_post_debootstrap_tweaks() {
	display_alert "Custom config stage" "config_post_debootstrap_tweaks" "info"
	config_post_debootstrap_tweaks__hack_armbianEnv_ci_args
	config_post_debootstrap_tweaks__make_sure_hostapd_behaves
}
