#export DEBUG_HOOKS=yes
display_alert "Included" "common-rpardini" "info"

# Try and catch errors early, at least for this code...
set -e

# My own fragments.
add_fragment "kernel_headers_deb_rootfs"
add_fragment "more_like_ubuntu_cloud"
add_fragment "cloud-init"

# Standard frag
add_fragment "detect-wishful-hooking"

source extra-rpardini.conf # my own proxy settings etc

# ... but Armbian expects to be able to continue from errors. Sorry.
set +e

display_alert "common-rpardini" "setting default values" "info"

# Common settings. Customize if you wish...
export RELEASE=hirsute # Armbian userspace "builds best" for the same release the host is running, due to qemu bugs on focal vs hirsute for example.
export SERIALCON="ttyAML0"
export DEFAULT_CONSOLE="serial"
export TZDATA="Europe/Amsterdam"
export ROOTPWD="1234"
export MAINTAINER="Ricardo Pardini"
export MAINTAINERMAIL="ricardo@pardini.net"

# Seems I have to be an expert, even though I'm clearly not.
export EXPERT=yes

# Configure those to your liking.
export ARMHF_ARCH="skip"            # Pure arm64 arch without armhf
export COMPRESS_OUTPUTIMAGE=sha,img # xz,
export REPOSITORY_INSTALL=""        # comma-separated list of core modules which will be installed from repository
export DEST_LANG="en_US.UTF-8"      # sl_SI.UTF-8, en_US.UTF-8
export EXTERNAL_NEW="none"          # do not install extras packages, a lot of evil comes from them; compile and install or install prebuilt additional packages
export USE_TORRENT="yes"            # use torrent network for faster toolchain and cache download
export DOWNLOAD_MIRROR=""           # set to "china" to use mirrors.tuna.tsinghua.edu.cn
export CARD_DEVICE=""               # device name /dev/sdx of your SD card to burn directly to the card when done
export BUILD_MINIMAL=no             # No minimal. Fully working server cli please
export BUILD_DESKTOP=no             # No desktop. You install it later after jumpstarting.
export BOOT_LOGO=""                 # it still builds the logo, thank you.
export INSTALL_HEADERS=no           # dont install kernel headers package
export INSTALL_KSRC=no              # install kernel-source package in the rootfs. it is slow, but allows us to hack kernel on the device itself easily
export BUILD_KSRC=no                # build kernel-source package. it is slow, but allows us to hack kernel on the device itself easily
export EXTRAWIFI=no                 # I dont use any wifi. So thank you but no
export WIREGUARD=yes                # Always nice. Is it not mainlined yet?
export AUFS=no                      # Docker uses overlay2 for years now.
export KERNEL_ONLY=no               # No, full image
export BRANCH=current               # Mainline always
export FULL_DESKTOP="no"            # No desktop, not full nor empty
export SYNC_CLOCK=no                # This takes waay too long, and I run ntpd anyway so...

# Default branch is 'current', which at time of writing meant 5.10.x for most stuff.
# Some of my boards do run better on legacy (eg, N2+) and will override this
export BRANCH=current

####
#### Dev stuff. Don't touch unless you're adding a board.
####
export KERNEL_CONFIGURE=no        # Change to yes to make menuconfig before compiling. The edited config will be output in output/config
export USE_GITHUB_UBOOT_MIRROR=no # U-boot lives in a Gitlab repo that goes down sometimes, use Github mirror if so.

export CLEAN_LEVEL=debs,images  # Rebuild kernel packages and userspace
#export CLEAN_LEVEL=images # Rebuild userspace only
#export CLEAN_LEVEL=debs # Rebuild kernel packages only

# Stops before compiling u-boot and kernel, allow you to change stuff (.dts, .dtsi, etc) directly at the tree. Will generate patches afterwards...
export CREATE_PATCHES=no        # does NOT stop for patching
#export CREATE_PATCHES=yes # stops for patching twice;

## rpardini specific
export COMPRESS_OUTPUTIMAGE=img # i'm an sdcard jockey -- no hashes for me
export OFFLINE_WORK=no          # yes to avoid using the network

###
### Logging
###
export PROGRESS_LOG_TO_FILE=yes # log some more stuff, or not, to disk
export PROGRESS_DISPLAY=none    # do not dump compilation results to screen causing thousands of lines of scroll
